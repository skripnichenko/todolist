{"version":3,"sources":["components/List.tsx","components/Navbar.tsx","components/TodoForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["List","list","removeTodo","onChangeChecked","length","className","map","el","completed","push","join","type","checked","onChange","id","title","onClick","Navbar","href","TodoForm","addToList","useState","todo","setTodo","e","target","value","onKeyPress","key","placeholder","htmlFor","App","setList","useEffect","savedList","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2LAkCeA,EAzBmB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,gBACnD,OAAoB,IAAhBF,EAAKG,OACE,mBAAGC,UAAU,SAAb,uCAEH,6BACHJ,EAAKK,KAAI,SAACC,GACP,IAAMC,EAAY,CAAC,QAInB,OAHID,EAAGC,WACHA,EAAUC,KAAK,aAGf,oBAAIJ,UAAWG,EAAUE,KAAK,KAA9B,SACI,kCACI,uBAAOC,KAAK,WAAWC,QAASL,EAAGC,UAAWK,SAAU,kBAAMV,EAAgBI,EAAGO,OACjF,+BAAOP,EAAGQ,QACV,mBAAGV,UAAU,0BAA0BW,QAAS,kBAAMd,EAAWK,EAAGO,KAApE,wBAJiCP,EAAGO,UCR7CG,EAVU,WACrB,OACI,8BACA,qBAAKZ,UAAU,kCAAf,SACE,mBAAGa,KAAK,IAAIb,UAAU,aAAtB,2BCwBKc,EAxB2B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACjCC,mBAAiB,IADgB,mBAClDC,EADkD,KAC5CC,EAD4C,KAczD,OACI,sBAAKlB,UAAU,kBAAf,UACI,uBAAOQ,SAbM,SAACW,GAClBD,EAAQC,EAAEC,OAAOC,QAYkBC,WATb,SAACH,GACT,UAAVA,EAAEI,MACFL,EAAQ,IACRH,EAAUE,KAMoDI,MAAOJ,EAAMO,YAAY,kBAAkBlB,KAAK,OAAOG,GAAG,UACxH,uBAAOgB,QAAQ,QAAQzB,UAAU,SAAjC,iCC6BG0B,EA7CO,WAAO,IAAD,EACFV,mBAAuB,IADrB,mBACnBpB,EADmB,KACb+B,EADa,KAiC1B,OATAC,qBAAU,WACR,IAAMC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,MAC7DN,EAAQE,KACP,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,OAAQJ,KAAKK,UAAUvC,MAC3C,CAACA,IAGF,gCACE,cAAC,EAAD,IACA,sBAAKI,UAAU,YAAf,UACE,cAAC,EAAD,CAAUe,UAnCE,SAACL,GACjB,IAAM0B,EAAsB,CAC1B1B,QACAD,GAAI4B,KAAKC,MACTnC,WAAW,GAETiC,EAAQ1B,MAAMX,QAAU,GAC1B4B,GAAQ,SAAAY,GAAI,OAAKH,GAAL,mBAAiBG,UA6B3B,cAAC,EAAD,CAAMzC,gBA1BY,SAACW,GACvBkB,GAAQ,SAAAY,GAAI,OAAIA,EAAKtC,KAAI,SAAAC,GAIvB,OAHIA,EAAGO,KAAOA,IACZP,EAAGC,WAAaD,EAAGC,WAEdD,SAqBmCL,WAlB3B,SAACY,GAClBkB,GAAQ,SAAAY,GAAI,OAAIA,EAAKC,QAAO,SAAAtC,GAAE,OAAIA,EAAGO,KAAOA,SAiBwBb,KAAMA,WC/B/D6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.2fc0cf6c.chunk.js","sourcesContent":["import React from 'react';\nimport { IAddToList } from './../interfaces';\n\ntype ListProps = {\n    list: IAddToList[],\n    onChangeChecked(id: number): void,\n    removeTodo(id: number): void\n}\n\nconst List: React.FC<ListProps> = ({ list, removeTodo, onChangeChecked }) => {\n    if (list.length === 0) {\n        return <p className='center'>You don't have todos know</p>\n    }\n    return (<ul>\n        {list.map((el) => {\n            const completed = ['todo']\n            if (el.completed) {\n                completed.push('completed')\n            }\n            return (\n                <li className={completed.join(' ')} key={el.id}>\n                    <label>\n                        <input type='checkbox' checked={el.completed} onChange={() => onChangeChecked(el.id)}/>\n                        <span>{el.title}</span>\n                        <i className='material-icons red-text' onClick={() => removeTodo(el.id)}>delete</i>\n\n                    </label>\n                </li>)\n        })\n        }\n    </ul>\n    )\n}\n\nexport default List\n","import React from 'react';\n\nconst Navbar: React.FC = () => {\n    return (\n        <nav>\n        <div className=\"nav-wrapper indigo darken-4 px1\">\n          <a href=\"/\" className=\"brand-logo\">TodoList</a>\n        </div>\n      </nav>\n    )\n}\n\nexport default Navbar;\n","import React, { useState } from 'react';\n\ntype TodoFormProps = {\n    addToList(title: string): void\n}\n\nconst TodoForm: React.FC<TodoFormProps> = ({ addToList }) => {\n    const [todo, setTodo] = useState<string>('');\n\n    const onChangeTodo = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTodo(e.target.value);\n    }\n\n    const enterPressHandler = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setTodo('')\n            addToList(todo);\n        }\n    }\n\n    return (\n        <div className='input-field mt2'>\n            <input onChange={onChangeTodo} onKeyPress={enterPressHandler} value={todo} placeholder='Enter the title' type='text' id='title' />\n            <label htmlFor='title' className='active'>\n                Enter the title\n            </label>\n        </div>\n    )\n}\n\nexport default TodoForm;\n","import React, { useEffect, useState } from 'react';\nimport List from './components/List';\nimport Navbar from './components/Navbar';\nimport TodoForm from './components/TodoForm';\nimport { IAddToList } from './interfaces';\n\n\nconst App: React.FC = () => {\n  const [list, setList] = useState<IAddToList[]>([]);\n  const addToList = (title: string) => {\n    const newTodo: IAddToList = {\n      title,\n      id: Date.now(),\n      completed: false\n    }\n    if (newTodo.title.length >= 1) {\n      setList(prev => [newTodo, ...prev])\n    }\n  }\n  const onChangeChecked = (id: number) => {\n    setList(prev => prev.map(el => {\n      if (el.id === id) {\n        el.completed = !el.completed\n      }\n      return el;\n    }))\n  }\n  const removeTodo = (id: number) => {\n    setList(prev => prev.filter(el => el.id !== id))\n  }\n\n  useEffect(() => {\n    const savedList = JSON.parse(localStorage.getItem('list') || '[]') as IAddToList[];\n    setList(savedList);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list));\n  }, [list])\n\n  return (\n    <div>\n      <Navbar />\n      <div className='container' >\n        <TodoForm addToList={addToList} />\n        <List onChangeChecked={onChangeChecked} removeTodo={removeTodo} list={list} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n      <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}